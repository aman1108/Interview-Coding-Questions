from collections import defaultdict

def solve(n,edges):
        def find(par,x):
            while (par[x]!=x):
                x=par[x]
            return x

        def union(rank,par,x,y):
            if (rank[x]>rank[y]):
                par[y]=x

            elif (rank[y]>rank[x]):
                par[x]=y

            else:
                par[y]=x
                rank[x]+=1

        m=len(edges)
        A=[]
        B=[]
        C=[]
        for i in range(m):
            if (edges[i][0]==1):
                A.append([edges[i][1],edges[i][2]])

            if (edges[i][0]==2):
                B.append([edges[i][1],edges[i][2]])

            if (edges[i][0]==3):
                C.append([edges[i][1],edges[i][2]])

        par=[i for i in range(n+1)]
        rank=[0 for i in range(n+1)]
        ans=0
        cnt1,cnt2=0,0
        for a,b in C:
            x,y=find(par,a),find(par,b)
            if (x==y):
                ans=ans+1
            else:
                cnt1+=1
                cnt2+=1
                union(rank,par,x,y)

        #print(cnt1,cnt2,ans)
        par1=[i for i in par]
        rank1=[i for i in rank]

        for a,b in B:
            x,y=find(par,a),find(par,b)
            if (x==y):
                ans=ans+1
            else:
                cnt1+=1
                union(rank,par,x,y)

        #print(cnt1,cnt2,ans)
        for a,b in A:
            x,y=find(par1,a),find(par1,b)
            if (x==y):
                ans=ans+1
            else:
                cnt2+=1
                union(rank1,par1,x,y)

        #print(cnt1,cnt2,ans)
        if (cnt1!=(n-1) or cnt2!=(n-1)):
            return -1

        else:
            return ans
        
#print(solve(4,[[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]))
#print(solve(4,[[3,1,2],[3,2,3],[1,1,4],[2,1,4]]))
#print(solve(4,[[3,2,3],[1,1,2],[2,3,4]]))

print(solve(13,[[1,1,2],[2,1,3],[3,2,4],[3,2,5],[1,2,6],[3,6,7],[3,7,8],[3,6,9],[3,4,10],[2,3,11],[1,5,12],[3,3,13],[2,1,10],[2,6,11],[3,5,13],[1,9,12],[1,6,8],[3,6,13],[2,1,4],[1,1,13],[2,9,10],[2,1,6],[2,10,13],[2,2,9],[3,4,12],[2,4,7],[1,1,10],[1,3,7],[1,7,11],[3,3,12],[2,4,8],[3,8,9],[1,9,13],[2,4,10],[1,6,9],[3,10,13],[1,7,10],[1,1,11],[2,4,9],[3,5,11],[3,2,6],[2,1,5],[2,5,11],[2,1,7],[2,3,8],[2,8,9],[3,4,13],[3,3,8],[3,3,11],[2,9,11],[3,1,8],[2,1,8],[3,8,13],[2,10,11],[3,1,5],[1,10,11],[1,7,12],[2,3,5],[3,1,13],[2,4,11],[2,3,9],[2,6,9],[2,1,13],[3,1,12],[2,7,8],[2,5,6],[3,1,9],[1,5,10],[3,2,13],[2,3,6],[2,2,10],[3,4,11],[1,4,13],[3,5,10],[1,4,10],[1,1,8],[3,3,4],[2,4,6],[2,7,11],[2,7,10],[2,3,12],[3,7,11],[3,9,10],[2,11,13],[1,1,12],[2,10,12],[1,7,13],[1,4,11],[2,4,5],[1,3,10],[2,12,13],[3,3,10],[1,6,12],[3,6,10],[1,3,4],[2,7,9],[1,3,11],[2,2,8],[1,2,8],[1,11,13],[1,2,13],[2,2,6],[1,4,6],[1,6,11],[3,1,2],[1,1,3],[2,11,12],[3,2,11],[1,9,10],[2,6,12],[3,1,7],[1,4,9],[1,10,12],[2,6,13],[2,2,12],[2,1,11],[2,5,9],[1,3,8],[1,7,8],[1,2,12],[1,5,11],[2,7,12],[3,1,11],[3,9,12],[3,2,9],[3,10,11]]))
