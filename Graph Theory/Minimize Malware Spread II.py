from collections import defaultdict
def solve(graph,initial):
    def find(par,x):
        while(x!=par[x]):
            x=par[x]
        return x

    def union(par,rank,x,y):
        if (rank[x]>rank[y]):
            par[y]=x
        elif (rank[y]>rank[x]):
            par[x]=y
        else:
            par[y]=x
            rank[x]+=1
            
    n=len(graph)
    m=len(initial)

    s=set(initial)
    par=[i for i in range(n)]
    rank=[1 for i in range(n)]
    
    for i in range(n):
        for j in range(i+1,n):
            if graph[i][j]==1 and i not in s and j not in s:
                x,y=find(par,i),find(par,j)
                if (x!=y):
                    union(par,rank,x,y)

    cnt=[-1 for i in range(n)]
    fv=[0 for i in range(n)]
    G=defaultdict(lambda:0)
    for i in range(n):
        x=find(par,i)
        fv[i]=x
        G[x]+=1

    ans=min(initial)
    mv=0
    for i in initial:
        for j in range(n):
            if graph[i][j]==1 and j not in s:
                x=fv[j]
                if (cnt[x]==-1):
                    cnt[x]=i
                elif (cnt[x]!=i):
                    cnt[x]=-2

    
    for i in initial:
        ctr=0
        v=set()
        for j in range(n):
            x=fv[j]
            if graph[i][j]==1 and j not in s and x not in v:
                if (cnt[x]==i):
                    ctr=ctr+G[x]
                    v.add(x)
        if (ctr>mv):
            mv=ctr
            ans=i
        elif(ctr==mv):
            ans=min(ans,i)
    
    return ans

print(solve([[1,0,0,0,0,0,0,0,1],[0,1,0,1,0,0,0,0,0],[0,0,1,1,0,1,0,0,0],[0,1,1,1,1,0,1,0,0],[0,0,0,1,1,1,0,0,0],[0,0,1,0,1,1,0,0,0],[0,0,0,1,0,0,1,1,0],[0,0,0,0,0,0,1,1,1],[1,0,0,0,0,0,0,1,1]],[3,7]))
        
                
        
            
